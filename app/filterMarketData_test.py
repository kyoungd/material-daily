from unittest import mock, TestCase, main
import pandas as pd
import random
import datetime
from util import RedisTimeFrame
from dbase import MarketDataDb

class TestMarketData(TestCase):

    def setUp(self):
        self.app = MarketDataDb()
        self.symbol = 'TEST01'

    def tearDown(self):
        pass

    def test_marketdatadb_01(self):
        # random number 0 to 100
        
        data1 = [
                {"t": "2022-05-11T12:54:00Z", "o": 60.99, "h": 60.99, "l": 60.99, "c": 60.99, "v": 300, "n": 2, "vw": 60.9901}, 
                {"t": "2022-05-11T12:39:00Z", "o": 62.5, "h": 62.5, "l": 61.14, "c": 61.14, "v": 203, "n": 3, "vw": 61.806995}, 
                {"t": "2022-05-10T20:49:00Z", "o": 63.14, "h": 63.14, "l": 63.14, "c": 63.14, "v": 738, "n": 3, "vw": 63.14}, 
                {"t": "2022-05-10T20:37:00Z", "o": 63.14, "h": 63.14, "l": 63.14, "c": 63.14, "v": 367, "n": 12, "vw": 63.150981}, 
                {"t": "2022-05-10T20:34:00Z", "o": 63.05, "h": 63.05, "l": 63.05, "c": 63.05, "v": 1870, "n": 1, "vw": 63.05}, 
                {"t": "2022-05-10T20:01:00Z", "o": 63.05, "h": 63.05, "l": 63.05, "c": 63.05, "v": 166, "n": 1, "vw": 63.05}, 
                {"t": "2022-05-10T20:00:00Z", "o": 63.05, "h": 63.05, "l": 63.05, "c": 63.05, "v": 86352, "n": 17, "vw": 63.05}, 
                {"t": "2022-05-10T19:59:00Z", "o": 63.21, "h": 63.26, "l": 63.06, "c": 63.17, "v": 48768, "n": 577, "vw": 63.196629}, 
                {"t": "2022-05-10T19:58:00Z", "o": 63.125, "h": 63.23, "l": 63.12, "c": 63.19, "v": 32905, "n": 434, "vw": 63.176757}, 
                {"t": "2022-05-10T19:57:00Z", "o": 63.08, "h": 63.155, "l": 63.08, "c": 63.125, "v": 24075, "n": 335, "vw": 63.11993}, 
                {"t": "2022-05-10T19:56:00Z", "o": 62.915, "h": 63.095, "l": 62.915, "c": 63.08, "v": 23586, "n": 356, "vw": 63.016562}, 
                {"t": "2022-05-10T19:55:00Z", "o": 63.02, "h": 63.07, "l": 62.91, "c": 62.915, "v": 16345, "n": 236, "vw": 62.970845}, 
                {"t": "2022-05-10T19:54:00Z", "o": 63.18, "h": 63.19, "l": 63.03, "c": 63.04, "v": 15894, "n": 304, "vw": 63.100413}, 
                {"t": "2022-05-10T19:53:00Z", "o": 63.13, "h": 63.23, "l": 63.13, "c": 63.19, "v": 17371, "n": 256, "vw": 63.166113}, 
                {"t": "2022-05-10T19:52:00Z", "o": 63.075, "h": 63.16, "l": 63.05, "c": 63.15, "v": 16097, "n": 230, "vw": 63.100952}, 
                {"t": "2022-05-10T19:51:00Z", "o": 63.045, "h": 63.095, "l": 63.01, "c": 63.08, "v": 15041, "n": 217, "vw": 63.059537}, 
                {"t": "2022-05-09T19:50:00Z", "o": 63.13, "h": 63.13, "l": 63, "c": 63.06, "v": 9846, "n": 157, "vw": 63.059741}, 
                {"t": "2022-05-09T19:49:00Z", "o": 63.08, "h": 63.21, "l": 63.07, "c": 63.145, "v": 11489, "n": 188, "vw": 63.139188}, 
                {"t": "2022-05-09T19:48:00Z", "o": 63.16, "h": 63.18, "l": 63.06, "c": 63.095, "v": 11551, "n": 181, "vw": 63.106101}, 
                {"t": "2022-05-08T19:47:00Z", "o": 63.11, "h": 63.155, "l": 63.065, "c": 63.14, "v": 7863, "n": 118, "vw": 63.109396}, 
                {"t": "2022-05-07T19:46:00Z", "o": 63.095, "h": 63.12, "l": 62.96, "c": 63.102, "v": 8571, "n": 143, "vw": 63.039032}
        ]
        data2 = self.app.MergeData(RedisTimeFrame.DAILY, data1)
        self.assertEqual(len(data2), 5)


    def test_marketdatadb_02(self):
        # random number 0 to 100
        
        data = [
                {"t": "2022-05-11T12:54:00Z", "o": 60.99, "h": 60.99, "l": 60.99, "c": 60.99, "v": 300, "n": 2, "vw": 60.9901}, 
                {"t": "2022-05-11T12:39:00Z", "o": 62.5, "h": 62.5, "l": 61.14, "c": 61.14, "v": 203, "n": 3, "vw": 61.806995}, 
                {"t": "2022-05-10T20:49:00Z", "o": 63.14, "h": 63.14, "l": 63.14, "c": 63.14, "v": 738, "n": 3, "vw": 63.14}, 
                {"t": "2022-05-10T20:37:00Z", "o": 63.14, "h": 63.14, "l": 63.14, "c": 63.14, "v": 367, "n": 12, "vw": 63.150981}, 
                {"t": "2022-05-10T20:34:00Z", "o": 63.05, "h": 63.05, "l": 63.05, "c": 63.05, "v": 1870, "n": 1, "vw": 63.05}, 
                {"t": "2022-05-10T20:01:00Z", "o": 63.05, "h": 63.05, "l": 63.05, "c": 63.05, "v": 166, "n": 1, "vw": 63.05}, 
                {"t": "2022-05-10T20:00:00Z", "o": 63.05, "h": 63.05, "l": 63.05, "c": 63.05, "v": 86352, "n": 17, "vw": 63.05}, 
                {"t": "2022-05-10T19:59:00Z", "o": 63.21, "h": 63.26, "l": 63.06, "c": 63.17, "v": 48768, "n": 577, "vw": 63.196629}, 
                {"t": "2022-05-10T19:58:00Z", "o": 63.125, "h": 63.23, "l": 63.12, "c": 63.19, "v": 32905, "n": 434, "vw": 63.176757}, 
                {"t": "2022-05-10T19:57:00Z", "o": 63.08, "h": 63.155, "l": 63.08, "c": 63.125, "v": 24075, "n": 335, "vw": 63.11993}, 
                {"t": "2022-05-10T19:56:00Z", "o": 62.915, "h": 63.095, "l": 62.915, "c": 63.08, "v": 23586, "n": 356, "vw": 63.016562}, 
                {"t": "2022-05-10T19:55:00Z", "o": 63.02, "h": 63.07, "l": 62.91, "c": 62.915, "v": 16345, "n": 236, "vw": 62.970845}, 
                {"t": "2022-05-10T19:54:00Z", "o": 63.18, "h": 63.19, "l": 63.03, "c": 63.04, "v": 15894, "n": 304, "vw": 63.100413}, 
                {"t": "2022-05-10T19:53:00Z", "o": 63.13, "h": 63.23, "l": 63.13, "c": 63.19, "v": 17371, "n": 256, "vw": 63.166113}, 
                {"t": "2022-05-10T19:52:00Z", "o": 63.075, "h": 63.16, "l": 63.05, "c": 63.15, "v": 16097, "n": 230, "vw": 63.100952}, 
                {"t": "2022-05-10T19:51:00Z", "o": 63.045, "h": 63.095, "l": 63.01, "c": 63.08, "v": 15041, "n": 217, "vw": 63.059537}, 
                {"t": "2022-05-09T19:50:00Z", "o": 63.13, "h": 63.13, "l": 63, "c": 63.06, "v": 9846, "n": 157, "vw": 63.059741}, 
                {"t": "2022-05-09T19:49:00Z", "o": 63.08, "h": 63.21, "l": 63.07, "c": 63.145, "v": 11489, "n": 188, "vw": 63.139188}, 
                {"t": "2022-05-09T19:48:00Z", "o": 63.16, "h": 63.18, "l": 63.06, "c": 63.095, "v": 11551, "n": 181, "vw": 63.106101}, 
                {"t": "2022-05-08T19:47:00Z", "o": 63.11, "h": 63.155, "l": 63.065, "c": 63.14, "v": 7863, "n": 118, "vw": 63.109396}, 
                {"t": "2022-05-07T19:46:00Z", "o": 63.095, "h": 63.12, "l": 62.96, "c": 63.102, "v": 8571, "n": 143, "vw": 63.039032}
        ];
        datatype = 'stock'
        timeframe='1Day'
        result = self.app.WriteMarket(self.symbol, data, datatype, timeframe)
        self.assertTrue(result)
        isReadOk, values = self.app.ReadMarket(self.symbol, datatype, timeframe)
        self.assertTrue(isReadOk)
        rows = values[0]
        self.assertEqual(rows[2]['o'], 63.13)
        self.assertEqual(rows[0]['o'], 60.99)
